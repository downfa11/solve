buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.palantir.docker' version '0.35.0'
}

group = 'com.ns'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    runtimeOnly 'com.mysql:mysql-connector-j'
    // runtimeOnly 'com.h2database:h2:2.1.214'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // AWS ECR
    implementation 'software.amazon.awssdk:ecr:2.20.28'
    implementation 'software.amazon.awssdk:sts:2.20.28'

    //json
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    //Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    //Kubernetes Java Client
    implementation 'io.kubernetes:client-java:18.0.0'

    //Docker Java Client
    implementation 'com.github.docker-java:docker-java:3.3.0'
    implementation 'com.github.docker-java:docker-java-transport-okhttp:3.3.0'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'

    // JGit
    implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '4.4.1.201607150455-r'
    implementation 'software.amazon.awssdk:ecr:2.20.5'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
}

// QueryDSL
// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}


tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

docker {
    println(tasks.bootJar.outputs.files)
    name project.name+":"+version
    dockerfile file('./Dockerfile')
    files tasks.bootJar.outputs.files
    files file('./config')
    buildArgs(['JAR_FILE':tasks.bootJar.outputs.files.singleFile.name])
}

tasks.named('test') {
    useJUnitPlatform()
}
